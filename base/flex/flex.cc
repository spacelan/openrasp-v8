
#line 3 "lex.yy.c"

#define YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined(__STDC__)

#define YY_USE_CONST

#endif /* defined (__STDC__) */
#endif /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin, yyscanner)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state* YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                     \
  do {                                                                \
    /* Undo effects of setting up yytext. */                          \
    int yyless_macro_arg = (n);                                       \
    YY_LESS_LINENO(yyless_macro_arg);                                 \
    *yy_cp = yyg->yy_hold_char;                                       \
    YY_RESTORE_YY_MORE_OFFSET                                         \
    yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */                    \
  } while (0)

#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
  FILE* yy_input_file;

  char* yy_ch_buf;  /* input buffer */
  char* yy_buf_pos; /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  yy_size_t yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE* input_file, yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void yypop_buffer_state(yyscan_t yyscanner);

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner);

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(yyconst char* yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(yyconst char* bytes, yy_size_t len, yyscan_t yyscanner);

void* yyalloc(yy_size_t, yyscan_t yyscanner);
void* yyrealloc(void*, yy_size_t, yyscan_t yyscanner);
void yyfree(void*, yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                                       \
  {                                                                              \
    if (!YY_CURRENT_BUFFER) {                                                    \
      yyensure_buffer_stack(yyscanner);                                          \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
    }                                                                            \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;                \
  }

#define yy_set_bol(at_bol)                                                       \
  {                                                                              \
    if (!YY_CURRENT_BUFFER) {                                                    \
      yyensure_buffer_stack(yyscanner);                                          \
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
    }                                                                            \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;                                \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state, yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yy_fatal_error(yyconst char msg[], yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION            \
  yyg->yytext_ptr = yy_bp;             \
  yyleng = (yy_size_t)(yy_cp - yy_bp); \
  yyg->yy_hold_char = *yy_cp;          \
  *yy_cp = '\0';                       \
  yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 42
#define YY_END_OF_BUFFER 43
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[496] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  43, 41, 22, 21, 5,  8,  6,  21, 16,
    1,  3,  21, 1,  20, 18, 19, 1,  41, 41, 9,  41, 10, 28, 27, 32, 31, 27, 27, 27, 41, 27, 41, 36, 41, 41,
    41, 41, 41, 29, 30, 41, 29, 41, 37, 41, 41, 41, 41, 41, 40, 39, 27, 34, 27, 24, 25, 38, 27, 41, 0,  12,
    0,  0,  0,  0,  0,  0,  8,  0,  13, 0,  0,  0,  0,  0,  0,  15, 1,  1,  1,  14, 0,  11, 0,

    0,  0,  0,  0,  0,  2,  17, 28, 27, 0,  0,  0,  0,  0,  0,  31, 26, 35, 26, 26, 0,  27, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  27, 27, 27, 27, 27, 29, 0,  0,  0,  0,  0,  0,  26, 0,  0,  0,  0,  0,  29,
    29, 29, 29, 29, 39, 33, 35, 33, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  8,  1,  7,  14, 0,  4,  11, 11, 11, 11, 27, 27, 27, 27, 27, 26, 0,  0,  0,  0,

    0,  0,  0,  0,  0,  0,  0,  27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 29, 29, 29, 29,
    29, 29, 29, 29, 29, 29, 29, 29, 23, 0,  0,  0,  0,  0,  12, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  13, 0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7,  0,  7,  11, 11, 11, 27, 27, 27, 27, 27, 27,
    27, 27, 27, 27, 0,  0,  0,  0,  0,  0,  27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  27, 27,

    27, 27, 27, 27, 27, 27, 27, 27, 0,  0,  0,  0,  0,  27, 27, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 0,
    0,  0,  0,  0,  29, 29, 0,  12, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  13,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  11, 11, 27, 27, 0,  27, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  27, 27, 27, 27, 27, 27, 27, 29, 29, 29,

    29, 29, 29, 29, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  11, 27, 0,  0,  0,  0,  0,  0,
    0,  27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29, 29, 29, 29, 29, 0,  0,  12, 0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  13, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  27, 0,  0,  0,  0,  0,  0,  0,  0,
    0,  27, 27, 29, 29, 0,  0,  0,  0,  0,  0,  27, 29, 0,  0,  0,  0

};

static yyconst flex_int32_t yy_ec[256] = {
    0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  3,  1,  2,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 9,  15, 16, 17, 18, 19, 19, 19, 19, 19, 19, 19, 19,
    19, 19, 9,  20, 21, 22, 10, 23, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
    25, 25, 25, 25, 25, 25, 25, 26, 27, 26, 9,  28, 29, 25, 25, 25, 25,

    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 30, 31, 32, 33, 1,  34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35,

    35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36,
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 40, 40};

static yyconst flex_int32_t yy_meta[41] = {0, 1, 2, 3, 2, 4, 1, 5, 6, 7, 2, 2, 5, 2, 4, 7, 4, 7, 7, 4, 2,
                                           2, 7, 4, 4, 4, 7, 7, 4, 8, 4, 2, 7, 2, 9, 7, 7, 7, 7, 7, 9};

static yyconst flex_int16_t yy_base[526] = {
    0,    0,    0,    0,    0,    40,   0,    80,   0,    115,  118,  119,  121,  129,  147,  120,  122,
    1007, 2459, 2459, 2459, 171,  0,    200,  988,  2459, 145,  2459, 991,  146,  2459, 2459, 2459, 150,
    144,  168,  2459, 973,  2459, 136,  164,  2459, 0,    160,  2459, 229,  990,  981,  177,  2459, 0,
    960,  959,  958,  957,  193,  2459, 193,  256,  295,  2459, 0,    956,  955,  947,  946,  2459, 0,
    967,  2459, 966,  964,  2459, 2459, 964,  956,  329,  2459, 206,  0,    933,  932,  931,  930,  0,
    358,  2459, 211,  0,    929,  826,  825,  824,  2459, 254,  235,  256,  138,  838,  2459, 152,

    155,  185,  219,  221,  261,  2459, 2459, 295,  273,  278,  0,    822,  821,  819,  818,  0,    2459,
    839,  300,  246,  387,  2459, 301,  0,    816,  815,  814,  813,  286,  287,  289,  307,  308,  0,
    426,  812,  811,  810,  830,  0,    0,    808,  807,  806,  805,  817,  343,  344,  352,  381,  466,
    816,  364,  480,  493,  506,  0,    816,  815,  814,  321,  323,  336,  340,  371,  540,  574,  609,
    791,  789,  372,  373,  435,  436,  437,  639,  668,  698,  788,  787,  0,    462,  806,  2459, 801,
    799,  439,  446,  448,  449,  0,    738,  783,  782,  781,  466,  473,  459,  462,  463,

    470,  513,  768,  797,  827,  780,  779,  867,  778,  777,  776,  0,    874,  0,    775,  768,  767,
    766,  0,    765,  764,  914,  763,  762,  760,  921,  381,  935,  948,  961,  974,  486,  987,  1000,
    2459, 1034, 1069, 759,  758,  1104, 1138, 1144, 757,  756,  755,  754,  753,  752,  751,  750,  1174,
    1204, 749,  748,  1234, 1263, 1269, 747,  746,  697,  696,  695,  694,  693,  692,  532,  710,  705,
    2459, 515,  516,  518,  0,    1276, 0,    688,  687,  686,  685,  0,    684,  683,  540,  1306, 1336,
    682,  681,  1366, 1395, 1401, 680,  679,  678,  677,  676,  667,  666,  665,  0,    1408,

    0,    664,  663,  662,  660,  0,    659,  658,  0,    657,  656,  655,  654,  0,    653,  673,  1415,
    499,  1429, 1442, 1455, 1468, 0,    651,  650,  0,    649,  648,  647,  646,  546,  1481, 1515, 1549,
    1555, 639,  638,  637,  636,  635,  634,  633,  631,  0,    630,  629,  628,  627,  626,  625,  1585,
    1614, 1620, 624,  623,  622,  621,  620,  619,  618,  617,  0,    608,  607,  606,  605,  604,  603,
    529,  530,  0,    601,  1650, 1679, 1685, 600,  599,  598,  597,  596,  595,  594,  593,  0,    592,
    591,  590,  589,  588,  587,  0,    586,  1725, 585,  584,  583,  0,    0,    582,  1765,

    573,  572,  571,  559,  570,  569,  1800, 1835, 568,  566,  565,  558,  557,  1865, 1895, 556,  555,
    554,  553,  0,    540,  537,  1925, 1955, 532,  528,  527,  0,    0,    1962, 0,    520,  505,  478,
    477,  0,    475,  474,  0,    471,  0,    434,  375,  370,  1997, 2031, 2037, 356,  354,  345,  341,
    337,  328,  325,  320,  312,  2067, 2096, 2102, 309,  288,  284,  273,  272,  271,  270,  268,  254,
    2132, 2161, 2167, 253,  251,  244,  228,  223,  200,  199,  192,  0,    190,  0,    188,  183,  170,
    160,  134,  133,  123,  0,    0,    122,  112,  111,  2459, 2207, 2216, 2224, 2233, 2241,

    2246, 2253, 2259, 2265, 2273, 2281, 2289, 2296, 2305, 2314, 2323, 2332, 2341, 2350, 2359, 2368, 2377,
    2386, 2395, 2404, 2413, 2422, 2431, 2440, 2449};

static yyconst flex_int16_t yy_def[526] = {
    0,   496, 496, 495, 3,   495, 5,   495, 7,   5,   5,   5,   5,   5,   5,   7,   7,   495, 495, 495, 495,
    497, 498, 499, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 500, 495, 495, 495, 495, 495, 501, 495,
    502, 503, 495, 504, 495, 495, 505, 495, 506, 506, 506, 506, 506, 507, 495, 503, 507, 507, 495, 508, 508,
    508, 508, 508, 495, 509, 57,  495, 57,  495, 495, 495, 57,  57,  497, 495, 497, 510, 510, 510, 510, 510,
    498, 499, 495, 499, 511, 511, 511, 511, 511, 495, 495, 495, 495, 512, 495, 495, 500,

    500, 500, 500, 500, 495, 495, 495, 495, 501, 505, 513, 513, 513, 513, 513, 502, 495, 495, 495, 495, 504,
    495, 504, 514, 514, 514, 514, 514, 505, 505, 505, 505, 505, 109, 495, 135, 135, 135, 58,  59,  508, 508,
    508, 508, 508, 58,  507, 507, 507, 507, 507, 58,  508, 508, 508, 508, 509, 495, 495, 495, 497, 497, 497,
    497, 497, 497, 515, 515, 168, 168, 499, 499, 499, 499, 499, 499, 516, 516, 178, 178, 498, 498, 517, 495,
    512, 495, 500, 500, 500, 500, 109, 495, 192, 192, 192, 495, 495, 504, 504, 504,

    504, 504, 504, 518, 518, 205, 205, 495, 208, 208, 208, 109, 208, 192, 192, 192, 192, 192, 135, 135, 135,
    495, 222, 222, 222, 222, 508, 508, 508, 508, 508, 508, 508, 508, 495, 519, 519, 237, 237, 497, 497, 237,
    168, 168, 168, 168, 168, 168, 168, 168, 520, 520, 252, 252, 499, 499, 252, 178, 178, 178, 178, 178, 178,
    178, 178, 498, 517, 517, 495, 500, 500, 500, 109, 208, 192, 192, 192, 192, 192, 192, 192, 192, 495, 521,
    521, 285, 285, 504, 504, 285, 205, 205, 205, 205, 205, 205, 205, 205, 109, 208,

    192, 192, 192, 192, 192, 208, 208, 208, 522, 522, 522, 522, 522, 135, 135, 58,  222, 508, 508, 508, 508,
    508, 222, 222, 222, 508, 508, 508, 508, 508, 508, 508, 497, 497, 237, 168, 168, 168, 168, 168, 237, 237,
    237, 515, 515, 515, 515, 515, 168, 168, 499, 499, 252, 178, 178, 178, 178, 178, 252, 252, 252, 516, 516,
    516, 516, 516, 178, 178, 500, 500, 192, 192, 504, 504, 285, 205, 205, 205, 205, 205, 285, 285, 285, 518,
    518, 518, 518, 518, 205, 205, 208, 208, 495, 393, 393, 393, 135, 222, 222, 495,

    400, 400, 400, 508, 237, 237, 523, 523, 408, 408, 168, 252, 252, 524, 524, 415, 415, 178, 500, 192, 285,
    285, 525, 525, 424, 424, 205, 208, 109, 208, 192, 192, 192, 192, 192, 393, 393, 393, 222, 58,  400, 400,
    400, 237, 497, 497, 237, 168, 168, 168, 168, 168, 408, 408, 408, 252, 499, 499, 252, 178, 178, 178, 178,
    178, 415, 415, 415, 285, 504, 504, 285, 205, 205, 205, 205, 205, 424, 424, 424, 393, 393, 400, 400, 408,
    408, 415, 415, 424, 424, 393, 400, 408, 415, 424, 0,   495, 495, 495, 495, 495,

    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495};

static yyconst flex_int16_t yy_nxt[2500] = {
    0,   18,  19,  19,  19,  20,  21,  22,  20,  20,  20,  23,  20,  20,  24,  25,  26,  27,  28,  29,  30,
    20,  31,  20,  32,  33,  18,  34,  33,  35,  36,  37,  38,  18,  18,  18,  18,  18,  18,  18,  18,  18,
    39,  39,  39,  40,  41,  42,  43,  40,  44,  45,  46,  18,  40,  40,  40,  40,  40,  40,  44,  47,  40,
    40,  40,  40,  40,  48,  40,  49,  40,  44,  40,  44,  18,  50,  51,  52,  53,  54,  18,  18,  55,  55,
    55,  55,  56,  55,  57,  55,  55,  55,  58,  55,  55,  55,  55,  55,  55,  55,  55,

    55,  55,  55,  55,  55,  55,  59,  55,  60,  55,  55,  55,  55,  18,  61,  62,  63,  64,  65,  18,  66,
    67,  68,  66,  67,  68,  70,  75,  70,  75,  71,  72,  71,  72,  66,  67,  74,  108, 108, 108, 71,  72,
    184, 69,  288, 255, 69,  73,  69,  73,  69,  185, 66,  67,  74,  240, 494, 69,  71,  72,  94,  96,  98,
    95,  95,  96,  288, 493, 96,  96,  96,  118, 96,  96,  96,  69,  77,  96,  100, 101, 102, 103, 104, 105,
    119, 99,  105, 119, 187, 120, 110, 99,  105, 255, 99,  105, 106, 78,  111, 112,

    113, 114, 115, 492, 118, 79,  80,  81,  82,  83,  86,  129, 130, 131, 132, 133, 240, 119, 188, 140, 119,
    491, 120, 490, 99,  489, 87,  141, 142, 143, 144, 145, 488, 288, 88,  89,  90,  91,  92,  122, 161, 162,
    163, 164, 165, 171, 172, 173, 174, 175, 96,  98,  189, 95,  190, 123, 207, 181, 99,  96,  99,  206, 96,
    124, 125, 126, 127, 128, 146, 182, 197, 96,  96,  197, 96,  117, 105, 205, 96,  105, 96,  96,  140, 96,
    204, 105, 203, 121, 105, 106, 141, 142, 143, 144, 145, 139, 108, 108, 108, 110,

    139, 487, 139, 486, 255, 180, 179, 111, 112, 113, 114, 115, 129, 130, 131, 132, 133, 178, 196, 109, 208,
    177, 209, 139, 196, 109, 109, 196, 109, 147, 148, 149, 150, 151, 77,  198, 199, 200, 201, 202, 210, 211,
    176, 139, 139, 85,  109, 109, 139, 139, 139, 139, 139, 485, 76,  78,  236, 139, 484, 139, 76,  240, 76,
    79,  80,  81,  82,  83,  86,  237, 170, 139, 139, 238, 169, 76,  139, 222, 168, 76,  139, 139, 139, 139,
    87,  223, 139, 167, 139, 166, 226, 139, 88,  89,  90,  91,  92,  122, 227, 228,

    229, 230, 231, 76,  239, 85,  251, 226, 483, 139, 76,  85,  85,  123, 224, 227, 228, 229, 230, 231, 139,
    124, 125, 126, 127, 128, 134, 134, 134, 134, 212, 134, 134, 134, 212, 134, 134, 134, 134, 212, 212, 212,
    212, 212, 212, 134, 134, 212, 212, 212, 212, 212, 213, 212, 134, 212, 134, 212, 134, 134, 214, 215, 216,
    217, 218, 134, 139, 482, 252, 253, 254, 139, 99,  139, 85,  85,  85,  266, 99,  270, 266, 271, 272, 139,
    196, 99,  266, 99,  99,  266, 196, 283, 121, 196, 139, 284, 285, 283, 121, 225,

    283, 121, 121, 286, 117, 139, 226, 481, 480, 121, 195, 194, 226, 232, 227, 228, 229, 230, 231, 226, 227,
    228, 229, 230, 231, 226, 233, 227, 228, 229, 230, 231, 226, 227, 228, 229, 230, 231, 193, 234, 227, 228,
    229, 230, 231, 77,  287, 266, 99,  369, 266, 370, 121, 192, 99,  99,  266, 99,  283, 266, 203, 479, 99,
    419, 283, 478, 78,  283, 99,  99,  468, 117, 226, 121, 79,  80,  81,  82,  83,  241, 227, 228, 229, 230,
    231, 226, 99,  176, 467, 466, 456, 85,  99,  227, 228, 229, 230, 231, 166, 455,

    242, 454, 444, 76,  443, 442, 441, 166, 243, 244, 245, 246, 247, 166, 241, 439, 438, 437, 436, 428, 427,
    203, 426, 425, 424, 423, 422, 421, 121, 207, 206, 205, 204, 203, 420, 242, 418, 176, 417, 416, 415, 414,
    248, 243, 244, 245, 246, 247, 166, 86,  413, 412, 85,  180, 179, 178, 177, 176, 411, 166, 410, 409, 408,
    407, 406, 87,  405, 76,  170, 169, 168, 167, 166, 88,  89,  90,  91,  92,  256, 403, 402, 401, 400, 399,
    398, 139, 397, 396, 395, 394, 393, 392, 391, 195, 257, 194, 193, 192, 390, 389,

    203, 176, 258, 259, 260, 261, 262, 176, 256, 207, 206, 205, 204, 203, 383, 382, 372, 371, 195, 194, 193,
    192, 269, 268, 257, 368, 367, 176, 180, 179, 178, 263, 258, 259, 260, 261, 262, 176, 191, 191, 191, 191,
    273, 191, 191, 191, 273, 191, 191, 191, 191, 273, 273, 273, 273, 273, 273, 191, 191, 273, 273, 273, 273,
    273, 274, 273, 191, 273, 191, 273, 191, 191, 275, 276, 277, 278, 279, 191, 122, 177, 176, 361, 360, 350,
    349, 166, 170, 169, 168, 167, 166, 343, 342, 325, 123, 324, 323, 315, 314, 195,

    194, 193, 124, 125, 126, 127, 128, 289, 192, 308, 307, 306, 298, 297, 282, 281, 280, 186, 269, 268, 265,
    264, 250, 290, 249, 235, 235, 117, 139, 139, 203, 291, 292, 293, 294, 295, 203, 289, 156, 155, 154, 153,
    139, 221, 220, 219, 207, 206, 205, 204, 117, 195, 194, 290, 193, 192, 186, 180, 179, 178, 296, 291, 292,
    293, 294, 295, 203, 109, 109, 109, 109, 299, 109, 109, 109, 299, 109, 109, 109, 109, 299, 299, 299, 299,
    299, 299, 109, 109, 299, 299, 299, 299, 299, 300, 299, 109, 299, 109, 299, 109,

    109, 301, 302, 303, 304, 305, 109, 495, 309, 310, 311, 312, 313, 495, 139, 316, 316, 316, 316, 139, 316,
    139, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 317, 316,
    139, 316, 316, 316, 316, 139, 318, 319, 320, 321, 322, 139, 495, 326, 327, 328, 329, 330, 495, 226, 177,
    170, 169, 168, 167, 158, 153, 227, 228, 229, 230, 231, 226, 160, 117, 159, 158, 156, 155, 154, 227, 228,
    229, 230, 231, 226, 154, 153, 138, 137, 136, 135, 155, 227, 228, 229, 230, 231,

    226, 122, 117, 107, 97,  93,  495, 156, 227, 228, 229, 230, 231, 226, 495, 495, 495, 495, 495, 495, 331,
    227, 228, 229, 230, 231, 226, 495, 495, 495, 495, 495, 495, 332, 227, 228, 229, 230, 231, 334, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 335, 495, 495,
    495, 495, 495, 495, 76,  336, 337, 338, 339, 340, 76,  334, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 335, 495, 495, 495, 495,

    495, 495, 341, 336, 337, 338, 339, 340, 76,  77,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 78,  495, 495, 495, 495, 495, 495, 495, 79,  80,  81,  82,
    83,  77,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 78,  495, 495, 495, 495, 495, 495, 495, 79,  80,  81,  82,  83,  495, 344, 345, 346, 347, 348, 495,
    352, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,

    353, 495, 495, 495, 495, 495, 495, 85,  354, 355, 356, 357, 358, 85,  352, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 353, 495, 495, 495, 495, 495, 495, 359, 354, 355, 356, 357,
    358, 85,  86,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 87,  495, 495,
    495, 495, 495, 495, 495, 88,  89,  90,  91,  92,  86,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 87,  495, 495, 495, 495, 495, 495, 495, 88,  89,  90,

    91,  92,  495, 362, 363, 364, 365, 366, 495, 495, 309, 310, 311, 312, 313, 495, 374, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 375, 495, 495, 495, 495, 495, 495, 121, 376, 377,
    378, 379, 380, 121, 374, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 375,
    495, 495, 495, 495, 495, 495, 381, 376, 377, 378, 379, 380, 121, 122, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 123, 495, 495, 495, 495, 495, 495, 495,

    124, 125, 126, 127, 128, 122, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    123, 495, 495, 495, 495, 495, 495, 495, 124, 125, 126, 127, 128, 495, 384, 385, 386, 387, 388, 495, 495,
    309, 310, 311, 312, 313, 495, 495, 326, 327, 328, 329, 330, 495, 226, 495, 495, 495, 495, 495, 495, 153,
    227, 228, 229, 230, 231, 226, 495, 495, 495, 495, 495, 495, 154, 227, 228, 229, 230, 231, 226, 495, 495,
    495, 495, 495, 495, 155, 227, 228, 229, 230, 231, 226, 495, 495, 495, 495, 495,

    495, 156, 227, 228, 229, 230, 231, 226, 495, 495, 495, 495, 495, 495, 404, 227, 228, 229, 230, 231, 77,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 78,
    495, 495, 495, 495, 495, 495, 495, 79,  80,  81,  82,  83,  77,  495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 78,  495, 495, 495, 495, 495, 495, 495, 79,
    80,  81,  82,  83,  495, 344, 345, 346, 347, 348, 495, 86,  495, 495, 495, 495,

    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 87,  495, 495, 495, 495, 495, 495, 495, 88,  89,
    90,  91,  92,  86,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 87,  495,
    495, 495, 495, 495, 495, 495, 88,  89,  90,  91,  92,  495, 362, 363, 364, 365, 366, 495, 122, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 123, 495, 495, 495, 495, 495, 495, 495,
    124, 125, 126, 127, 128, 122, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,

    495, 495, 495, 495, 495, 123, 495, 495, 495, 495, 495, 495, 495, 124, 125, 126, 127, 128, 495, 384, 385,
    386, 387, 388, 495, 273, 273, 273, 273, 429, 273, 273, 273, 429, 273, 273, 273, 273, 429, 429, 429, 429,
    429, 429, 273, 273, 429, 429, 429, 429, 429, 430, 429, 273, 429, 273, 429, 273, 273, 431, 432, 433, 434,
    435, 273, 152, 440, 440, 440, 440, 152, 440, 152, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
    440, 440, 440, 440, 440, 440, 440, 226, 440, 152, 440, 440, 440, 440, 152, 227,

    228, 229, 230, 231, 152, 446, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 447, 495, 495, 495, 495, 495, 495, 240, 448, 449, 450, 451, 452, 240, 446, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 447, 495,
    495, 495, 495, 495, 495, 453, 448, 449, 450, 451, 452, 240, 458, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 459, 495, 495, 495, 495, 495, 495, 255, 460,

    461, 462, 463, 464, 255, 458, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    459, 495, 495, 495, 495, 495, 495, 465, 460, 461, 462, 463, 464, 255, 470, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 471, 495, 495, 495, 495, 495, 495, 288, 472, 473, 474, 475,
    476, 288, 470, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 471, 495, 495,
    495, 495, 495, 495, 477, 472, 473, 474, 475, 476, 288, 495, 309, 310, 311, 312,

    313, 495, 77,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 78,  495, 495, 495, 495, 495, 495, 495, 79,  80,  81,  82,  83,  77,  495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 78,  495, 495, 495, 495, 495,
    495, 495, 79,  80,  81,  82,  83,  495, 344, 345, 346, 347, 348, 495, 86,  495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 87,  495, 495, 495, 495, 495, 495,

    495, 88,  89,  90,  91,  92,  86,  495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 87,  495, 495, 495, 495, 495, 495, 495, 88,  89,  90,  91,  92,  495, 362, 363, 364, 365, 366, 495,
    122, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 123, 495, 495, 495, 495,
    495, 495, 495, 124, 125, 126, 127, 128, 122, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 123, 495, 495, 495, 495, 495, 495, 495, 124, 125, 126, 127, 128,

    495, 384, 385, 386, 387, 388, 495, 18,  18,  18,  18,  18,  18,  18,  18,  18,  76,  76,  76,  76,  76,
    76,  76,  76,  84,  84,  495, 84,  84,  84,  84,  84,  84,  85,  85,  85,  85,  85,  85,  85,  85,  99,
    99,  99,  99,  99,  99,  99,  99,  109, 495, 495, 109, 116, 116, 495, 116, 116, 116, 116, 116, 116, 117,
    117, 117, 121, 121, 121, 121, 121, 121, 121, 121, 109, 109, 109, 109, 109, 109, 109, 109, 134, 134, 134,
    134, 134, 134, 134, 134, 134, 139, 139, 139, 139, 495, 139, 152, 152, 152, 152,

    152, 152, 152, 152, 152, 157, 157, 495, 157, 157, 157, 157, 495, 157, 166, 166, 166, 166, 166, 166, 166,
    166, 166, 176, 176, 176, 176, 176, 176, 176, 176, 176, 183, 183, 183, 183, 183, 183, 183, 183, 183, 191,
    191, 191, 191, 191, 191, 191, 191, 191, 203, 203, 203, 203, 203, 203, 203, 203, 203, 240, 240, 240, 240,
    240, 240, 240, 240, 240, 255, 255, 255, 255, 255, 255, 255, 255, 255, 267, 267, 267, 267, 267, 267, 267,
    267, 267, 288, 288, 288, 288, 288, 288, 288, 288, 288, 333, 333, 333, 333, 333,

    333, 333, 333, 333, 351, 351, 351, 351, 351, 351, 351, 351, 351, 373, 373, 373, 373, 373, 373, 373, 373,
    373, 273, 273, 273, 273, 273, 273, 273, 273, 273, 445, 445, 445, 445, 445, 445, 445, 445, 445, 457, 457,
    457, 457, 457, 457, 457, 457, 457, 469, 469, 469, 469, 469, 469, 469, 469, 469, 17,  495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495

};

static yyconst flex_int16_t yy_chk[2500] = {
    0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   5,
    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,
    5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   7,   7,   7,
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,

    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   9,
    9,   9,   10,  10,  10,  11,  15,  12,  16,  11,  11,  12,  12,  13,  13,  13,  39,  39,  39,  13,  13,
    97,  9,   494, 493, 10,  11,  15,  12,  16,  97,  14,  14,  14,  492, 489, 13,  14,  14,  26,  29,  29,
    26,  29,  33,  488, 487, 33,  26,  29,  43,  26,  29,  33,  14,  21,  33,  34,  34,  34,  34,  34,  35,
    43,  100, 35,  43,  101, 43,  40,  100, 35,  486, 101, 35,  35,  21,  40,  40,

    40,  40,  40,  485, 57,  21,  21,  21,  21,  21,  23,  48,  48,  48,  48,  48,  484, 57,  102, 55,  57,
    483, 57,  481, 102, 479, 23,  55,  55,  55,  55,  55,  478, 477, 23,  23,  23,  23,  23,  45,  78,  78,
    78,  78,  78,  87,  87,  87,  87,  87,  95,  95,  103, 95,  104, 45,  476, 94,  103, 95,  104, 475, 95,
    45,  45,  45,  45,  45,  58,  94,  120, 96,  94,  120, 96,  120, 105, 474, 94,  105, 96,  94,  58,  96,
    473, 105, 472, 468, 105, 105, 58,  58,  58,  58,  58,  59,  108, 108, 108, 109,

    59,  467, 59,  466, 465, 464, 463, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 462, 119, 129, 130,
    461, 131, 59,  119, 129, 130, 119, 131, 59,  59,  59,  59,  59,  76,  123, 123, 123, 123, 123, 132, 133,
    460, 147, 148, 456, 132, 133, 147, 148, 147, 148, 149, 455, 161, 76,  162, 149, 454, 149, 161, 453, 162,
    76,  76,  76,  76,  76,  85,  163, 452, 147, 148, 164, 451, 163, 147, 148, 450, 164, 149, 150, 147, 148,
    85,  149, 150, 449, 150, 448, 153, 149, 85,  85,  85,  85,  85,  121, 153, 153,

    153, 153, 153, 444, 165, 171, 172, 227, 443, 150, 165, 171, 172, 121, 150, 227, 227, 227, 227, 227, 150,
    121, 121, 121, 121, 121, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
    135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
    135, 135, 135, 151, 442, 173, 174, 175, 151, 187, 151, 173, 174, 175, 182, 187, 188, 182, 189, 190, 440,
    196, 188, 182, 189, 190, 182, 196, 197, 198, 196, 151, 199, 200, 197, 198, 151,

    197, 199, 200, 201, 197, 151, 154, 438, 437, 201, 435, 434, 232, 154, 154, 154, 154, 154, 154, 155, 232,
    232, 232, 232, 232, 318, 155, 155, 155, 155, 155, 155, 156, 318, 318, 318, 318, 318, 433, 156, 156, 156,
    156, 156, 156, 166, 202, 266, 270, 271, 266, 272, 202, 432, 270, 271, 266, 272, 283, 266, 427, 426, 369,
    370, 283, 425, 166, 283, 369, 370, 422, 283, 331, 421, 166, 166, 166, 166, 166, 167, 331, 331, 331, 331,
    331, 404, 419, 418, 417, 416, 413, 412, 419, 404, 404, 404, 404, 404, 411, 410,

    167, 409, 406, 405, 403, 402, 401, 167, 167, 167, 167, 167, 167, 167, 168, 399, 396, 395, 394, 392, 390,
    389, 388, 387, 386, 385, 383, 382, 381, 380, 379, 378, 377, 376, 372, 168, 368, 367, 366, 365, 364, 363,
    168, 168, 168, 168, 168, 168, 168, 176, 361, 360, 359, 358, 357, 356, 355, 354, 350, 349, 348, 347, 346,
    345, 343, 176, 342, 341, 340, 339, 338, 337, 336, 176, 176, 176, 176, 176, 177, 330, 329, 328, 327, 325,
    324, 316, 315, 313, 312, 311, 310, 308, 307, 305, 177, 304, 303, 302, 298, 297,

    296, 177, 177, 177, 177, 177, 177, 177, 178, 295, 294, 293, 292, 291, 287, 286, 282, 281, 279, 278, 277,
    276, 268, 267, 178, 265, 264, 263, 262, 261, 260, 178, 178, 178, 178, 178, 178, 178, 192, 192, 192, 192,
    192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
    192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 203, 259, 258, 254, 253, 250,
    249, 248, 247, 246, 245, 244, 243, 239, 238, 225, 203, 224, 223, 221, 220, 218,

    217, 216, 203, 203, 203, 203, 203, 204, 215, 211, 210, 209, 207, 206, 195, 194, 193, 186, 185, 183, 180,
    179, 170, 204, 169, 160, 159, 158, 152, 146, 204, 204, 204, 204, 204, 204, 204, 205, 145, 144, 143, 142,
    139, 138, 137, 136, 128, 127, 126, 125, 118, 115, 114, 205, 113, 112, 98,  92,  91,  90,  205, 205, 205,
    205, 205, 205, 205, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
    208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208,

    208, 208, 208, 208, 208, 208, 208, 213, 213, 213, 213, 213, 213, 213, 222, 222, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
    222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 226, 226, 226, 226, 226, 226, 226, 228, 89,
    83,  82,  81,  80,  75,  228, 228, 228, 228, 228, 228, 229, 74,  71,  70,  68,  65,  64,  229, 229, 229,
    229, 229, 229, 230, 63,  62,  54,  53,  52,  51,  230, 230, 230, 230, 230, 230,

    231, 47,  46,  37,  28,  24,  17,  231, 231, 231, 231, 231, 231, 233, 0,   0,   0,   0,   0,   0,   233,
    233, 233, 233, 233, 233, 234, 0,   0,   0,   0,   0,   0,   234, 234, 234, 234, 234, 234, 236, 0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   236, 0,   0,
    0,   0,   0,   0,   236, 236, 236, 236, 236, 236, 236, 237, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   237, 0,   0,   0,   0,

    0,   0,   237, 237, 237, 237, 237, 237, 237, 240, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   240, 0,   0,   0,   0,   0,   0,   0,   240, 240, 240, 240,
    240, 241, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   241, 0,   0,   0,   0,   0,   0,   0,   241, 241, 241, 241, 241, 242, 242, 242, 242, 242, 242, 242,
    251, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,

    251, 0,   0,   0,   0,   0,   0,   251, 251, 251, 251, 251, 251, 251, 252, 0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   252, 0,   0,   0,   0,   0,   0,   252, 252, 252, 252, 252,
    252, 252, 255, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   255, 0,   0,
    0,   0,   0,   0,   0,   255, 255, 255, 255, 255, 256, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   256, 0,   0,   0,   0,   0,   0,   0,   256, 256, 256,

    256, 256, 257, 257, 257, 257, 257, 257, 257, 274, 274, 274, 274, 274, 274, 274, 284, 0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   284, 0,   0,   0,   0,   0,   0,   284, 284, 284,
    284, 284, 284, 284, 285, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   285,
    0,   0,   0,   0,   0,   0,   285, 285, 285, 285, 285, 285, 285, 288, 0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   288, 0,   0,   0,   0,   0,   0,   0,

    288, 288, 288, 288, 288, 289, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    289, 0,   0,   0,   0,   0,   0,   0,   289, 289, 289, 289, 289, 290, 290, 290, 290, 290, 290, 290, 300,
    300, 300, 300, 300, 300, 300, 317, 317, 317, 317, 317, 317, 317, 319, 0,   0,   0,   0,   0,   0,   319,
    319, 319, 319, 319, 319, 320, 0,   0,   0,   0,   0,   0,   320, 320, 320, 320, 320, 320, 321, 0,   0,
    0,   0,   0,   0,   321, 321, 321, 321, 321, 321, 322, 0,   0,   0,   0,   0,

    0,   322, 322, 322, 322, 322, 322, 332, 0,   0,   0,   0,   0,   0,   332, 332, 332, 332, 332, 332, 333,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   333,
    0,   0,   0,   0,   0,   0,   0,   333, 333, 333, 333, 333, 334, 0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   334, 0,   0,   0,   0,   0,   0,   0,   334,
    334, 334, 334, 334, 335, 335, 335, 335, 335, 335, 335, 351, 0,   0,   0,   0,

    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   351, 0,   0,   0,   0,   0,   0,   0,   351, 351,
    351, 351, 351, 352, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   352, 0,
    0,   0,   0,   0,   0,   0,   352, 352, 352, 352, 352, 353, 353, 353, 353, 353, 353, 353, 373, 0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   373, 0,   0,   0,   0,   0,   0,   0,
    373, 373, 373, 373, 373, 374, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,

    0,   0,   0,   0,   0,   374, 0,   0,   0,   0,   0,   0,   0,   374, 374, 374, 374, 374, 375, 375, 375,
    375, 375, 375, 375, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
    393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393, 393,
    393, 393, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
    400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400,

    400, 400, 400, 400, 400, 407, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   407, 0,   0,   0,   0,   0,   0,   407, 407, 407, 407, 407, 407, 407, 408, 0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   408, 0,
    0,   0,   0,   0,   0,   408, 408, 408, 408, 408, 408, 408, 414, 0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   414, 0,   0,   0,   0,   0,   0,   414, 414,

    414, 414, 414, 414, 414, 415, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    415, 0,   0,   0,   0,   0,   0,   415, 415, 415, 415, 415, 415, 415, 423, 0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   423, 0,   0,   0,   0,   0,   0,   423, 423, 423, 423, 423,
    423, 423, 424, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   424, 0,   0,
    0,   0,   0,   0,   424, 424, 424, 424, 424, 424, 424, 430, 430, 430, 430, 430,

    430, 430, 445, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   445, 0,   0,   0,   0,   0,   0,   0,   445, 445, 445, 445, 445, 446, 0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   446, 0,   0,   0,   0,   0,
    0,   0,   446, 446, 446, 446, 446, 447, 447, 447, 447, 447, 447, 447, 457, 0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   457, 0,   0,   0,   0,   0,   0,

    0,   457, 457, 457, 457, 457, 458, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   458, 0,   0,   0,   0,   0,   0,   0,   458, 458, 458, 458, 458, 459, 459, 459, 459, 459, 459, 459,
    469, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   469, 0,   0,   0,   0,
    0,   0,   0,   469, 469, 469, 469, 469, 470, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   470, 0,   0,   0,   0,   0,   0,   0,   470, 470, 470, 470, 470,

    471, 471, 471, 471, 471, 471, 471, 496, 496, 496, 496, 496, 496, 496, 496, 496, 497, 497, 497, 497, 497,
    497, 497, 497, 498, 498, 0,   498, 498, 498, 498, 498, 498, 499, 499, 499, 499, 499, 499, 499, 499, 500,
    500, 500, 500, 500, 500, 500, 500, 501, 0,   0,   501, 502, 502, 0,   502, 502, 502, 502, 502, 502, 503,
    503, 503, 504, 504, 504, 504, 504, 504, 504, 504, 505, 505, 505, 505, 505, 505, 505, 505, 506, 506, 506,
    506, 506, 506, 506, 506, 506, 507, 507, 507, 507, 0,   507, 508, 508, 508, 508,

    508, 508, 508, 508, 508, 509, 509, 0,   509, 509, 509, 509, 0,   509, 510, 510, 510, 510, 510, 510, 510,
    510, 510, 511, 511, 511, 511, 511, 511, 511, 511, 511, 512, 512, 512, 512, 512, 512, 512, 512, 512, 513,
    513, 513, 513, 513, 513, 513, 513, 513, 514, 514, 514, 514, 514, 514, 514, 514, 514, 515, 515, 515, 515,
    515, 515, 515, 515, 515, 516, 516, 516, 516, 516, 516, 516, 516, 516, 517, 517, 517, 517, 517, 517, 517,
    517, 517, 518, 518, 518, 518, 518, 518, 518, 518, 518, 519, 519, 519, 519, 519,

    519, 519, 519, 519, 520, 520, 520, 520, 520, 520, 520, 520, 520, 521, 521, 521, 521, 521, 521, 521, 521,
    521, 522, 522, 522, 522, 522, 522, 522, 522, 522, 523, 523, 523, 523, 523, 523, 523, 523, 523, 524, 524,
    524, 524, 524, 524, 524, 524, 524, 525, 525, 525, 525, 525, 525, 525, 525, 525, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495,
    495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495, 495

};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flexLexer/lex.l"
#line 2 "flexLexer/lex.l"

typedef enum flex_mode {
  flex_mode_sql,
  flex_mode_bash,
  flex_mode_bashQuote,
  flex_mode_bashTick,
  flex_mode_bashExec,
  flex_mode_bashTickExec,
  flex_mode_bashTickQuote
} flex_mode;

typedef struct mode_info {
  flex_mode mode_type;
  int32_t parentheses_count;  //未匹配的括号数量
  mode_info* next;            //下一个mode_info节点
} mode_info;

typedef struct token_info {
  const char* mode;  //存储使用的tokenize规则，为sql或bash
  int32_t* result;  //存储token起止下标在输入字符串上的位置，格式为[token1_start_pos,token1_stop_pos,
                    // token2_start_pos,token2_stop_pos ...]
  int32_t result_len;             //当前result已申请的内存大小
  const char* input;              //当前输入字符串
  int32_t crt_input_pos;          //当前输入字符串已分析的长度
  int32_t crt_input_unicode_pos;  //当前输入字符串已分析的unicode字符数
  int32_t crt_result_pos;         //当前result数组长度
  mode_info* mode_info_ptr;       //记录flex_mode当前状态信息的堆栈
} token_info;

#line 40 "flexLexer/lex.l"
#include <stdlib.h>
#include "flex.h"

#ifdef _WIN32
#define YY_NO_UNISTD_H
static inline int isatty(int desc) {
  return 0;
}
#endif

#define ADD_TOKEN                      \
  if (add_token(yyextra, yyleng) != 0) \
    return -1;

#define SKIP_TOKEN change_pos(yyextra, yyleng);
#define INIT_RESULT_LEN 8192 * 2

#define BEGIN_MODE(mode)          \
  switch (mode) {                 \
    case flex_mode_sql:           \
      BEGIN(sql);                 \
      break;                      \
    case flex_mode_bash:          \
      BEGIN(bash);                \
      break;                      \
    case flex_mode_bashQuote:     \
      BEGIN(bashQuote);           \
      break;                      \
    case flex_mode_bashTick:      \
      BEGIN(bashTick);            \
      break;                      \
    case flex_mode_bashExec:      \
      BEGIN(bashExec);            \
      break;                      \
    case flex_mode_bashTickExec:  \
      BEGIN(bashTickExec);        \
      break;                      \
    case flex_mode_bashTickQuote: \
      BEGIN(bashTickQuote);       \
      break;                      \
  }

#define PUSH_MODE(mode_type)                   \
  if (bash_push_mode(yyextra, mode_type) != 0) \
    return -1;                                 \
  BEGIN_MODE(mode_type)

#define POP_MODE BEGIN_MODE(bash_pop_mode(yyextra, 0))

#define POP_MODE_TICK BEGIN_MODE(bash_pop_mode(yyextra, 1))

#define INIT_MODE(mode_type)                          \
  if (init_mode(yyextra, flex_mode_##mode_type) != 0) \
    return -1;                                        \
  BEGIN(mode_type);

#define FREE_MODE free_mode(yyextra);

#define PARENTHESES_ADD yyextra->mode_info_ptr->parentheses_count++;

#define PARENTHESES_SUB                                   \
  if (yyextra->mode_info_ptr->parentheses_count-- == 0) { \
    POP_MODE                                              \
  }

static int32_t init_mode(token_info* yyext, flex_mode mode_type) {
  mode_info* init_mode_info_ptr = (mode_info*)malloc(sizeof(mode_info));
  if (init_mode_info_ptr == NULL) {
    return -1;
  }
  init_mode_info_ptr->mode_type = mode_type;
  init_mode_info_ptr->parentheses_count = 0;
  init_mode_info_ptr->next = NULL;
  yyext->mode_info_ptr = init_mode_info_ptr;
  return 0;
}

static void free_mode(token_info* yyext) {
  mode_info* next_ptr = yyext->mode_info_ptr;
  mode_info* crt_ptr;
  while (next_ptr != NULL) {
    crt_ptr = next_ptr;
    next_ptr = next_ptr->next;
    free(crt_ptr);
  }
  return;
}

static int32_t bash_push_mode(token_info* yyext, flex_mode next_mode) {
  mode_info* new_mode = (mode_info*)malloc(sizeof(mode_info));
  if (new_mode == NULL) {
    return -1;
  }
  new_mode->mode_type = next_mode;
  new_mode->parentheses_count = 0;
  new_mode->next = yyext->mode_info_ptr;
  yyext->mode_info_ptr = new_mode;
  return 0;
}

static flex_mode bash_pop_mode(token_info* yyext, int32_t is_tick) {
  mode_info* next_mode_ptr = yyext->mode_info_ptr->next;
  if (is_tick) {
    while (next_mode_ptr != NULL && yyext->mode_info_ptr->mode_type != flex_mode_bashTick) {
      next_mode_ptr = next_mode_ptr->next;
      bash_pop_mode(yyext, 0);
    }
  }

  if (next_mode_ptr == NULL) {
    return (yyext->mode_info_ptr->mode_type);
  } else {
    free(yyext->mode_info_ptr);
    yyext->mode_info_ptr = next_mode_ptr;
    return next_mode_ptr->mode_type;
  }
}

static int32_t check_mem(token_info* yyext, int32_t new_str_len) {
  if (yyext->crt_result_pos + new_str_len > yyext->result_len) {
    int32_t new_result_len = yyext->result_len;
    int32_t* new_result;
    do {
      // 结果不大于10M
      if (new_result_len > (1024 * 1024 * 10)) {
        return -1;
      }
      new_result_len = new_result_len * 2;
    } while (yyext->crt_result_pos + new_str_len > new_result_len);
    new_result = (int32_t*)realloc(yyext->result, sizeof(int32_t) * new_result_len);
    if (new_result == NULL) {
      return -1;
    }
    yyext->result = new_result;
    yyext->result_len = new_result_len;
    return 0;
  } else {
    return 0;
  }
}

static int32_t utf8len(const char* str, int32_t str_len) {
  int32_t pos = 0;
  int32_t length = 0;

  while (pos < str_len) {
    if (0xfc == (0xfe & *(str + pos))) {
      // 6-byte utf8 code point (began with 0b1111110x)
      pos += 6;
      // if a character consists of more than 3 bytes (eg. 😄), v8 will store it as 2 utf8 rune
      length++;
    } else if (0xf8 == (0xfc & *(str + pos))) {
      // 5-byte utf8 code point (began with 0b111110xx)
      pos += 5;
      length++;
    } else if (0xf0 == (0xf8 & *(str + pos))) {
      // 4-byte utf8 code point (began with 0b11110xxx)
      pos += 4;
      length++;
    } else if (0xe0 == (0xf0 & *(str + pos))) {
      // 3-byte utf8 code point (began with 0b1110xxxx)
      pos += 3;
    } else if (0xc0 == (0xe0 & *(str + pos))) {
      // 2-byte utf8 code point (began with 0b110xxxxx)
      pos += 2;
    } else {
      // 1-byte ascii (began with 0b0xxxxxxx)
      pos += 1;
    }

    // no matter the bytes we marched s forward by, it was
    // only 1 utf8 codepoint
    length++;
  }
  return length;
}

static void change_pos(token_info* yyext, int32_t length) {
  yyext->crt_input_unicode_pos += utf8len(yyext->input + yyext->crt_input_pos, length);
  yyext->crt_input_pos += length;
}

static int32_t add_token(token_info* yyext, int32_t length) {
  if (check_mem(yyext, length) == 0) {
    *(yyext->result + yyext->crt_result_pos) = yyext->crt_input_unicode_pos;
    yyext->crt_result_pos++;
    // printf("crt_result_pos %d\n", yyext->crt_result_pos);
    change_pos(yyext, length);
    *(yyext->result + yyext->crt_result_pos) = yyext->crt_input_unicode_pos;
    yyext->crt_result_pos++;
    return 0;
  } else {
    return -1;
  }
}

// comman tokens
// sql tokens
// bash fragment
// bash tokens

#line 1387 "lex.yy.c"

#define INITIAL 0
#define sql 1
#define bash 2
#define bashQuote 3
#define bashTick 4
#define bashExec 5
#define bashTickExec 6
#define bashTickQuote 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE token_info*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
  /* User-defined. Not touched by flex. */
  YY_EXTRA_TYPE yyextra_r;

  /* The rest are the same as the globals declared in the non-reentrant scanner. */
  FILE *yyin_r, *yyout_r;
  size_t yy_buffer_stack_top;       /**< index of top of stack. */
  size_t yy_buffer_stack_max;       /**< capacity of stack. */
  YY_BUFFER_STATE* yy_buffer_stack; /**< Stack as an array. */
  char yy_hold_char;
  yy_size_t yy_n_chars;
  yy_size_t yyleng_r;
  char* yy_c_buf_p;
  int yy_init;
  int yy_start;
  int yy_did_buffer_switch_on_eof;
  int yy_start_stack_ptr;
  int yy_start_stack_depth;
  int* yy_start_stack;
  yy_state_type yy_last_accepting_state;
  char* yy_last_accepting_cpos;

  int yylineno_r;
  int yy_flex_debug_r;

  char* yytext_r;
  int yy_more_flag;
  int yy_more_len;

}; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

int yylex_init(yyscan_t* scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE* yyget_in(yyscan_t yyscanner);

void yyset_in(FILE* in_str, yyscan_t yyscanner);

FILE* yyget_out(yyscan_t yyscanner);

void yyset_out(FILE* out_str, yyscan_t yyscanner);

yy_size_t yyget_leng(yyscan_t yyscanner);

char* yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int line_number, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap(yyscan_t yyscanner);
#else
extern int yywrap(yyscan_t yyscanner);
#endif
#endif

static void yyunput(int c, char* buf_ptr, yyscan_t yyscanner);

#ifndef yytext_ptr
static void yy_flex_strncpy(char*, yyconst char*, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char*, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite(yytext, yyleng, 1, yyout)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                     \
  if (YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) {                        \
    int c = '*';                                                            \
    yy_size_t n;                                                            \
    for (n = 0; n < max_size && (c = getc(yyin)) != EOF && c != '\n'; ++n)  \
      buf[n] = (char)c;                                                     \
    if (c == '\n')                                                          \
      buf[n++] = (char)c;                                                   \
    if (c == EOF && ferror(yyin))                                           \
      YY_FATAL_ERROR("input in flex scanner failed");                       \
    result = n;                                                             \
  } else {                                                                  \
    errno = 0;                                                              \
    while ((result = fread(buf, 1, max_size, yyin)) == 0 && ferror(yyin)) { \
      if (errno != EINTR) {                                                 \
        YY_FATAL_ERROR("input in flex scanner failed");                     \
        break;                                                              \
      }                                                                     \
      errno = 0;                                                            \
      clearerr(yyin);                                                       \
    }                                                                       \
  }

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex(yyscan_t yyscanner);

#define YY_DECL int yylex(yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL {
  yy_state_type yy_current_state;
  char *yy_cp, *yy_bp;
  int yy_act;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

#line 318 "flexLexer/lex.l"

  if (strcmp(yyextra->mode, "sql") == 0) {
    INIT_MODE(sql)
  } else if (strcmp(yyextra->mode, "bash") == 0) {
    INIT_MODE(bash)
  } else {
    return -1;
  }

#line 1625 "lex.yy.c"

  if (!yyg->yy_init) {
    yyg->yy_init = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!yyg->yy_start)
      yyg->yy_start = 1; /* first start state */

    if (!yyin)
      yyin = stdin;

    if (!yyout)
      yyout = stdout;

    if (!YY_CURRENT_BUFFER) {
      yyensure_buffer_stack(yyscanner);
      YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
    }

    yy_load_buffer_state(yyscanner);
  }

  while (1) /* loops until end-of-file is reached */
  {
    yy_cp = yyg->yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yyg->yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yyg->yy_start;
  yy_match:
    do {
      YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
      if (yy_accept[yy_current_state]) {
        yyg->yy_last_accepting_state = yy_current_state;
        yyg->yy_last_accepting_cpos = yy_cp;
      }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int)yy_def[yy_current_state];
        if (yy_current_state >= 496)
          yy_c = yy_meta[(unsigned int)yy_c];
      }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
      ++yy_cp;
    } while (yy_base[yy_current_state] != 2459);

  yy_find_action:
    yy_act = yy_accept[yy_current_state];
    if (yy_act == 0) { /* have to back up */
      yy_cp = yyg->yy_last_accepting_cpos;
      yy_current_state = yyg->yy_last_accepting_state;
      yy_act = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

  do_action: /* This label is used only to access EOF actions. */

    switch (yy_act) { /* beginning of action switch */
      case 0:         /* must back up */
        /* undo the effects of YY_DO_BEFORE_ACTION */
        *yy_cp = yyg->yy_hold_char;
        yy_cp = yyg->yy_last_accepting_cpos;
        yy_current_state = yyg->yy_last_accepting_state;
        goto yy_find_action;

      case 1:
        YY_RULE_SETUP
#line 330 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 2 : YY_RULE_SETUP
#line 331 "flexLexer/lex.l"
                                          {ADD_TOKEN} YY_BREAK case 3 : YY_RULE_SETUP
#line 333 "flexLexer/lex.l"
                                                                        {ADD_TOKEN} YY_BREAK case 4
            : YY_RULE_SETUP
#line 334 "flexLexer/lex.l"
              {ADD_TOKEN} YY_BREAK case 5 : YY_RULE_SETUP
#line 336 "flexLexer/lex.l"
                                            {ADD_TOKEN} YY_BREAK case 6 : YY_RULE_SETUP
#line 337 "flexLexer/lex.l"
                                                                          {ADD_TOKEN} YY_BREAK case 7 :
            /* rule 7 can match eol */
            YY_RULE_SETUP
#line 339 "flexLexer/lex.l"
            {SKIP_TOKEN} YY_BREAK case 8 : YY_RULE_SETUP
#line 340 "flexLexer/lex.l"
                                           {SKIP_TOKEN} YY_BREAK case 9 : YY_RULE_SETUP
#line 342 "flexLexer/lex.l"
                                                                          {ADD_TOKEN} YY_BREAK case 10
            : YY_RULE_SETUP
#line 343 "flexLexer/lex.l"
              {ADD_TOKEN} YY_BREAK case 11 :
            /* rule 11 can match eol */
            YY_RULE_SETUP
#line 345 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 12 :
            /* rule 12 can match eol */
            YY_RULE_SETUP
#line 346 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 13 :
            /* rule 13 can match eol */
            YY_RULE_SETUP
#line 347 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 14 : YY_RULE_SETUP
#line 349 "flexLexer/lex.l"
                                           {ADD_TOKEN} YY_BREAK case 15 : YY_RULE_SETUP
#line 350 "flexLexer/lex.l"
                                                                          {ADD_TOKEN} YY_BREAK case 16
            : YY_RULE_SETUP
#line 352 "flexLexer/lex.l"
              {ADD_TOKEN} YY_BREAK case 17 : YY_RULE_SETUP
#line 354 "flexLexer/lex.l"
                                             {ADD_TOKEN} YY_BREAK case 18 : YY_RULE_SETUP
#line 356 "flexLexer/lex.l"
                                                                            {ADD_TOKEN} YY_BREAK case 19
            : YY_RULE_SETUP
#line 358 "flexLexer/lex.l"
              {ADD_TOKEN} YY_BREAK case 20 : YY_RULE_SETUP
#line 360 "flexLexer/lex.l"
                                             {ADD_TOKEN} YY_BREAK case 21 : YY_RULE_SETUP
#line 362 "flexLexer/lex.l"
                                                                            {ADD_TOKEN} YY_BREAK case 22 :
            /* rule 22 can match eol */
            YY_RULE_SETUP
#line 364 "flexLexer/lex.l"
            {SKIP_TOKEN} YY_BREAK

            case 23 : YY_RULE_SETUP
#line 368 "flexLexer/lex.l"
                      {ADD_TOKEN} YY_BREAK case 24 : YY_RULE_SETUP
#line 369 "flexLexer/lex.l"
                                                     {ADD_TOKEN PARENTHESES_ADD} YY_BREAK case 25
            : YY_RULE_SETUP
#line 370 "flexLexer/lex.l"
              {ADD_TOKEN PARENTHESES_SUB} YY_BREAK

              case 26 : YY_RULE_SETUP
#line 374 "flexLexer/lex.l"
                        {ADD_TOKEN} YY_BREAK

                        case 27 :
            /* rule 27 can match eol */
            YY_RULE_SETUP
#line 378 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 28 :
            /* rule 28 can match eol */
            YY_RULE_SETUP
#line 379 "flexLexer/lex.l"
            {SKIP_TOKEN} YY_BREAK

            case 29 :
            /* rule 29 can match eol */
            YY_RULE_SETUP
#line 383 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case 30 : YY_RULE_SETUP
#line 384 "flexLexer/lex.l"
                                           {ADD_TOKEN POP_MODE} YY_BREAK

                                           case 31 : YY_RULE_SETUP
#line 388 "flexLexer/lex.l"
                                                     {ADD_TOKEN} YY_BREAK case 32
            : YY_RULE_SETUP
#line 389 "flexLexer/lex.l"
              {ADD_TOKEN PUSH_MODE(flex_mode_bashQuote)} YY_BREAK

              case 33 : YY_RULE_SETUP
#line 393 "flexLexer/lex.l"
                        {ADD_TOKEN PUSH_MODE(flex_mode_bashTickExec)} YY_BREAK case 34
            : YY_RULE_SETUP
#line 394 "flexLexer/lex.l"
              {ADD_TOKEN POP_MODE_TICK} YY_BREAK

              case 35 : YY_RULE_SETUP
#line 398 "flexLexer/lex.l"
                        {ADD_TOKEN PUSH_MODE(flex_mode_bashExec)} YY_BREAK

                        case 36 : YY_RULE_SETUP
#line 402 "flexLexer/lex.l"
                                  {ADD_TOKEN PUSH_MODE(flex_mode_bashTick)} YY_BREAK

                                  case 37 : YY_RULE_SETUP
#line 406 "flexLexer/lex.l"
                                            {ADD_TOKEN PUSH_MODE(flex_mode_bashTick)} YY_BREAK

                                            case 38 : YY_RULE_SETUP
#line 410 "flexLexer/lex.l"
                                                      {ADD_TOKEN PUSH_MODE(flex_mode_bashTickExec)} YY_BREAK

                                                      case 39 : YY_RULE_SETUP
#line 414 "flexLexer/lex.l"
                                                                {ADD_TOKEN} YY_BREAK case 40
            : YY_RULE_SETUP
#line 415 "flexLexer/lex.l"
              {ADD_TOKEN PUSH_MODE(flex_mode_bashTickQuote)} YY_BREAK

              case 41 :
            /* rule 41 can match eol */
            YY_RULE_SETUP
#line 418 "flexLexer/lex.l"
            {ADD_TOKEN} YY_BREAK case YY_STATE_EOF(INITIAL)
            : case YY_STATE_EOF(sql)
            : case YY_STATE_EOF(bash)
            : case YY_STATE_EOF(bashQuote)
            : case YY_STATE_EOF(bashTick)
            : case YY_STATE_EOF(bashExec)
            : case YY_STATE_EOF(bashTickExec)
            : case YY_STATE_EOF(bashTickQuote)
            :
#line 420 "flexLexer/lex.l"
        {
          FREE_MODE return 0;
        }
        YY_BREAK
      case 42:
        YY_RULE_SETUP
#line 422 "flexLexer/lex.l"
        YY_FATAL_ERROR("flex scanner jammed");
        YY_BREAK
#line 1961 "lex.yy.c"

      case YY_END_OF_BUFFER: {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int)(yy_cp - yyg->yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yyg->yy_hold_char;
        YY_RESTORE_YY_MORE_OFFSET

        if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
          /* We're scanning a new file or input source.  It's
           * possible that this happened because the user
           * just pointed yyin at a new source and called
           * yylex().  If so, then we have to assure
           * consistency between YY_CURRENT_BUFFER and our
           * globals.  Here is the right place to do so, because
           * this is the first action (other than possibly a
           * back-up) that will match for the new input source.
           */
          yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
          YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
        }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if (yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars]) { /* This was really a NUL. */
          yy_state_type yy_next_state;

          yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

          yy_current_state = yy_get_previous_state(yyscanner);

          /* Okay, we're now positioned to make the NUL
           * transition.  We couldn't have
           * yy_get_previous_state() go ahead and do it
           * for us because it doesn't know how to deal
           * with the possibility of jamming (and we don't
           * want to build jamming into it because then it
           * will run more slowly).
           */

          yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

          yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

          if (yy_next_state) {
            /* Consume the NUL. */
            yy_cp = ++yyg->yy_c_buf_p;
            yy_current_state = yy_next_state;
            goto yy_match;
          }

          else {
            yy_cp = yyg->yy_c_buf_p;
            goto yy_find_action;
          }
        }

        else
          switch (yy_get_next_buffer(yyscanner)) {
            case EOB_ACT_END_OF_FILE: {
              yyg->yy_did_buffer_switch_on_eof = 0;

              if (yywrap(yyscanner)) {
                /* Note: because we've taken care in
                 * yy_get_next_buffer() to have set up
                 * yytext, we can now set up
                 * yy_c_buf_p so that if some total
                 * hoser (like flex itself) wants to
                 * call the scanner after we return the
                 * YY_NULL, it'll still work - another
                 * YY_NULL will get returned.
                 */
                yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                yy_act = YY_STATE_EOF(YY_START);
                goto do_action;
              }

              else {
                if (!yyg->yy_did_buffer_switch_on_eof)
                  YY_NEW_FILE;
              }
              break;
            }

            case EOB_ACT_CONTINUE_SCAN:
              yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state(yyscanner);

              yy_cp = yyg->yy_c_buf_p;
              yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
              goto yy_match;

            case EOB_ACT_LAST_MATCH:
              yyg->yy_c_buf_p = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

              yy_current_state = yy_get_previous_state(yyscanner);

              yy_cp = yyg->yy_c_buf_p;
              yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
              goto yy_find_action;
          }
        break;
      }

      default:
        YY_FATAL_ERROR("fatal flex scanner internal error--no action found");
    } /* end of action switch */
  }   /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  char* dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  char* source = yyg->yytext_ptr;
  int number_to_move, i;
  int ret_val;

  if (yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1])
    YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
    if (yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1) {
      /* We matched a single character, the EOB, so
       * treat this as a final EOF.
       */
      return EOB_ACT_END_OF_FILE;
    }

    else {
      /* We matched some text prior to the EOB, first
       * process it.
       */
      return EOB_ACT_LAST_MATCH;
    }
  }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

  else {
    yy_size_t num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

      /* just a shorter name for the current buffer */
      YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

      int yy_c_buf_p_offset = (int)(yyg->yy_c_buf_p - b->yy_ch_buf);

      if (b->yy_is_our_buffer) {
        yy_size_t new_size = b->yy_buf_size * 2;

        if (new_size <= 0)
          b->yy_buf_size += b->yy_buf_size / 8;
        else
          b->yy_buf_size *= 2;

        b->yy_ch_buf = (char*)
            /* Include room in for 2 EOB chars. */
            yyrealloc((void*)b->yy_ch_buf, b->yy_buf_size + 2, yyscanner);
      } else
        /* Can't grow it, we don't own it. */
        b->yy_ch_buf = 0;

      if (!b->yy_ch_buf)
        YY_FATAL_ERROR("fatal error - scanner input buffer overflow");

      yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

      num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
    }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), yyg->yy_n_chars, num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  if (yyg->yy_n_chars == 0) {
    if (number_to_move == YY_MORE_ADJ) {
      ret_val = EOB_ACT_END_OF_FILE;
      yyrestart(yyin, yyscanner);
    }

    else {
      ret_val = EOB_ACT_LAST_MATCH;
      YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
    }
  }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)(yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf =
        (char*)yyrealloc((void*)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size, yyscanner);
    if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

  yyg->yy_n_chars += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner) {
  yy_state_type yy_current_state;
  char* yy_cp;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yy_current_state = yyg->yy_start;

  for (yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp) {
    YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    if (yy_accept[yy_current_state]) {
      yyg->yy_last_accepting_state = yy_current_state;
      yyg->yy_last_accepting_cpos = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
      yy_current_state = (int)yy_def[yy_current_state];
      if (yy_current_state >= 496)
        yy_c = yy_meta[(unsigned int)yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state, yyscan_t yyscanner) {
  int yy_is_jam;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
  char* yy_cp = yyg->yy_c_buf_p;

  YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state]) {
    yyg->yy_last_accepting_state = yy_current_state;
    yyg->yy_last_accepting_cpos = yy_cp;
  }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
    yy_current_state = (int)yy_def[yy_current_state];
    if (yy_current_state >= 496)
      yy_c = yy_meta[(unsigned int)yy_c];
  }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
  yy_is_jam = (yy_current_state == 495);

  return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput(int c, char* yy_bp, yyscan_t yyscanner) {
  char* yy_cp;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yy_cp = yyg->yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yyg->yy_hold_char;

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2) { /* need to shift things up to make room */
    /* +2 for EOB chars. */
    yy_size_t number_to_move = yyg->yy_n_chars + 2;
    char* dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    char* source = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      *--dest = *--source;

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
      YY_FATAL_ERROR("flex scanner push-back overflow");
  }

  *--yy_cp = (char)c;

  yyg->yytext_ptr = yy_bp;
  yyg->yy_hold_char = *yy_cp;
  yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
  int c;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  *yyg->yy_c_buf_p = yyg->yy_hold_char;

  if (*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if (yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
      /* This was really a NUL. */
      *yyg->yy_c_buf_p = '\0';

    else { /* need more input */
      yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
      ++yyg->yy_c_buf_p;

      switch (yy_get_next_buffer(yyscanner)) {
        case EOB_ACT_LAST_MATCH:
          /* This happens because yy_g_n_b()
           * sees that we've accumulated a
           * token and flags that we need to
           * try matching the token before
           * proceeding.  But for input(),
           * there's no matching to consider.
           * So convert the EOB_ACT_LAST_MATCH
           * to EOB_ACT_END_OF_FILE.
           */

          /* Reset buffer status. */
          yyrestart(yyin, yyscanner);

          /*FALLTHROUGH*/

        case EOB_ACT_END_OF_FILE: {
          if (yywrap(yyscanner))
            return 0;

          if (!yyg->yy_did_buffer_switch_on_eof)
            YY_NEW_FILE;
#ifdef __cplusplus
          return yyinput(yyscanner);
#else
          return input(yyscanner);
#endif
        }

        case EOB_ACT_CONTINUE_SCAN:
          yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
          break;
      }
    }
  }

  c = *(unsigned char*)yyg->yy_c_buf_p; /* cast for 8-bit char's */
  *yyg->yy_c_buf_p = '\0';              /* preserve yytext */
  yyg->yy_hold_char = *++yyg->yy_c_buf_p;

  return c;
}
#endif /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart(FILE* input_file, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER) {
    yyensure_buffer_stack(yyscanner);
    YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
  }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
  yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* TODO. We should be able to replace this entire function body
   * with
   *		yypop_buffer_state();
   *		yypush_buffer_state(new_buffer);
   */
  yyensure_buffer_stack(yyscanner);
  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state(yyscanner);

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer(FILE* file, int size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char*)yyalloc(b->yy_buf_size + 2, yyscanner);
  if (!b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file, yyscanner);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
void yy_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!b)
    return;

  if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;

  if (b->yy_is_our_buffer)
    yyfree((void*)b->yy_ch_buf, yyscanner);

  yyfree((void*)b, yyscanner);
}

#ifndef __cplusplus
extern int isatty(int);
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE* file, yyscan_t yyscanner)

{
  int oerrno = errno;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  yy_flush_buffer(b, yyscanner);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER) {
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
  }

  b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;

  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void yy_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (!b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state(yyscanner);
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack(yyscanner);

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER) {
    /* Flush out information for old buffer. */
    *yyg->yy_c_buf_p = yyg->yy_hold_char;
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
  }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    yyg->yy_buffer_stack_top++;
  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state(yyscanner);
  yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
  YY_CURRENT_BUFFER_LVALUE = NULL;
  if (yyg->yy_buffer_stack_top > 0)
    --yyg->yy_buffer_stack_top;

  if (YY_CURRENT_BUFFER) {
    yy_load_buffer_state(yyscanner);
    yyg->yy_did_buffer_switch_on_eof = 1;
  }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack(yyscan_t yyscanner) {
  yy_size_t num_to_alloc;
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!yyg->yy_buffer_stack) {
    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc(num_to_alloc * sizeof(struct yy_buffer_state*), yyscanner);
    if (!yyg->yy_buffer_stack)
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    yyg->yy_buffer_stack_max = num_to_alloc;
    yyg->yy_buffer_stack_top = 0;
    return;
  }

  if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {
    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
    yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc(
        yyg->yy_buffer_stack, num_to_alloc * sizeof(struct yy_buffer_state*), yyscanner);
    if (!yyg->yy_buffer_stack)
      YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

    /* zero only the new slots.*/
    memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
    yyg->yy_buffer_stack_max = num_to_alloc;
  }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char* base, yy_size_t size, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;

  if (size < 2 || base[size - 2] != YY_END_OF_BUFFER_CHAR || base[size - 1] != YY_END_OF_BUFFER_CHAR)
    /* They forgot to leave room for the EOB's. */
    return 0;

  b = (YY_BUFFER_STATE)yyalloc(sizeof(struct yy_buffer_state), yyscanner);
  if (!b)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

  b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
  b->yy_buf_pos = b->yy_ch_buf = base;
  b->yy_is_our_buffer = 0;
  b->yy_input_file = 0;
  b->yy_n_chars = b->yy_buf_size;
  b->yy_is_interactive = 0;
  b->yy_at_bol = 1;
  b->yy_fill_buffer = 0;
  b->yy_buffer_status = YY_BUFFER_NEW;

  yy_switch_to_buffer(b, yyscanner);

  return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(yyconst char* yystr, yyscan_t yyscanner) {
  return yy_scan_bytes(yystr, strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(yyconst char* yybytes, yy_size_t _yybytes_len, yyscan_t yyscanner) {
  YY_BUFFER_STATE b;
  char* buf;
  yy_size_t n, i;

  /* Get memory for full buffer, including space for trailing EOB's. */
  n = _yybytes_len + 2;
  buf = (char*)yyalloc(n, yyscanner);
  if (!buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

  for (i = 0; i < _yybytes_len; ++i)
    buf[i] = yybytes[i];

  buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

  b = yy_scan_buffer(buf, n, yyscanner);
  if (!b)
    YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

  /* It's okay to grow etc. this buffer, and we should throw it
   * away when we're done.
   */
  b->yy_is_our_buffer = 1;

  return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yyconst char* msg, yyscan_t yyscanner) {
  (void)fprintf(stderr, "%s\n", msg);
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                \
  do {                                           \
    /* Undo effects of setting up yytext. */     \
    int yyless_macro_arg = (n);                  \
    YY_LESS_LINENO(yyless_macro_arg);            \
    yytext[yyleng] = yyg->yy_hold_char;          \
    yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
    yyg->yy_hold_char = *yyg->yy_c_buf_p;        \
    *yyg->yy_c_buf_p = '\0';                     \
    yyleng = yyless_macro_arg;                   \
  } while (0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER)
    return 0;

  return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  if (!YY_CURRENT_BUFFER)
    return 0;

  return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_in(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE* yyget_out(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char* yyget_text(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyextra = user_defined;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno(int line_number, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* lineno is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER)
    yy_fatal_error("yyset_lineno called with no buffer", yyscanner);

  yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column(int column_no, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* column is only valid if an input buffer exists. */
  if (!YY_CURRENT_BUFFER)
    yy_fatal_error("yyset_column called with no buffer", yyscanner);

  yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE* in_str, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyin = in_str;
}

void yyset_out(FILE* out_str, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yyout = out_str;
}

int yyget_debug(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  return yy_flex_debug;
}

void yyset_debug(int bdebug, yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  yy_flex_debug = bdebug;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), NULL);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  return yy_init_globals(*ptr_yy_globals);
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals)

{
  struct yyguts_t dummy_yyguts;

  yyset_extra(yy_user_defined, &dummy_yyguts);

  if (ptr_yy_globals == NULL) {
    errno = EINVAL;
    return 1;
  }

  *ptr_yy_globals = (yyscan_t)yyalloc(sizeof(struct yyguts_t), &dummy_yyguts);

  if (*ptr_yy_globals == NULL) {
    errno = ENOMEM;
    return 1;
  }

  /* By setting to 0xAA, we expose bugs in
  yy_init_globals. Leave at 0x00 for releases. */
  memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

  yyset_extra(yy_user_defined, *ptr_yy_globals);

  return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  /* Initialization is the same as for the non-reentrant scanner.
   * This function is called from yylex_destroy(), so don't allocate here.
   */

  yyg->yy_buffer_stack = 0;
  yyg->yy_buffer_stack_top = 0;
  yyg->yy_buffer_stack_max = 0;
  yyg->yy_c_buf_p = (char*)0;
  yyg->yy_init = 0;
  yyg->yy_start = 0;

  yyg->yy_start_stack_ptr = 0;
  yyg->yy_start_stack_depth = 0;
  yyg->yy_start_stack = NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
  yyin = stdin;
  yyout = stdout;
#else
  yyin = (FILE*)0;
  yyout = (FILE*)0;
#endif

  /* For future reference: Set errno on error, since we are called by
   * yylex_init()
   */
  return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner) {
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;

  /* Pop the buffer stack, destroying each element. */
  while (YY_CURRENT_BUFFER) {
    yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state(yyscanner);
  }

  /* Destroy the stack itself. */
  yyfree(yyg->yy_buffer_stack, yyscanner);
  yyg->yy_buffer_stack = NULL;

  /* Destroy the start condition stack. */
  yyfree(yyg->yy_start_stack, yyscanner);
  yyg->yy_start_stack = NULL;

  /* Reset the globals. This is important in a non-reentrant scanner so the next time
   * yylex() is called, initialization will occur. */
  yy_init_globals(yyscanner);

  /* Destroy the main struct (reentrant only). */
  yyfree(yyscanner, yyscanner);
  yyscanner = NULL;
  return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, yyconst char* s2, int n, yyscan_t yyscanner) {
  int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char* s, yyscan_t yyscanner) {
  int n;
  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void* yyalloc(yy_size_t size, yyscan_t yyscanner) {
  return (void*)malloc(size);
}

void* yyrealloc(void* ptr, yy_size_t size, yyscan_t yyscanner) {
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void*)realloc((char*)ptr, size);
}

void yyfree(void* ptr, yyscan_t yyscanner) {
  free((char*)ptr); /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 422 "flexLexer/lex.l"

flex_token_result flex_lexing(const char* input, int32_t len, const char* tokenizer_type) {
  int32_t* init_token_result = (int32_t*)malloc(sizeof(int32_t) * INIT_RESULT_LEN);
  if (init_token_result == NULL) {
    flex_token_result res = {NULL, 0};
    return res;
  }
  int32_t res_state;
  yyscan_t scanner;
  token_info ti = {tokenizer_type, init_token_result, INIT_RESULT_LEN, input, 0, 0, 0, NULL};
  if (yylex_init_extra(&ti, &scanner) != 0) {
    res_state = 1;
  } else {
#ifndef DISABLE_EXCEPTION
    try {
#endif

      YY_BUFFER_STATE buffer = yy_scan_bytes(input, len, scanner);
      res_state = yylex(scanner);

#ifndef DISABLE_EXCEPTION
    } catch (const char* msg) {
      res_state = 1;
    }
#endif
    yylex_destroy(scanner);
  }
  if (res_state != 0) {
    free(ti.result);
    flex_token_result res = {NULL, 0};
    return res;
  }
  flex_token_result res = {ti.result, ti.crt_result_pos};
  return res;
}

// void test_s(const char * input){
//     int32_t len = strlen(input);
//     flex_token_result res = flex_lexing((char*)input, len, "bash");
//     if (res.result != NULL){
//         free(res.result);
//     }
// }

// int main(int argc, char* argv[]) {
//     // clock_t c_start = clock();
//     // for(int32_t i=0;i<100000;i++){
//     //     char input[] = "SELECT id, name FROM vuln WHERE id = 0";
//     //     int32_t len = strlen(input);
//     //     lexing((char*)input, len);

//     // }
//     // clock_t c_end = clock();
//     // printf("The lex used %lf s \n", (double)(c_end - c_start)/CLOCKS_PER_SEC );

//     // char input[] = "SELECT COUNT(*) FROM (SELECT    DATE_FORMAT(   ce.create_time,     '%Y-%m-%d %H:%i:%s'   )
//     create_time,   ce.balance,   ce.deal_id,   CASE     WHEN (ce.acct_code=1280100010001 && ce.cr_dr = 1 )
//     ||(ce.acct_code=2280300010001 && ce.cr_dr = 2 )||(ce.acct_code=1280100020001 && ce.cr_dr = 1 )     THEN ce.amount
//     ELSE 0    END er_amount,   CASE     WHEN (ce.acct_code=1280100010001 && ce.cr_dr = 2 )
//     ||(ce.acct_code=2280300010001 && ce.cr_dr = 1 )||(ce.acct_code=1280100020001 && ce.cr_dr = 2 )     THEN ce.amount
//     ELSE 0    END ee_amount,   ce.as_fee,   ce.deal_code,   ccc.description,   cd.order_id,   cs.acct_name,   CASE
//     WHEN ce.cr_dr = 1      THEN cd.payee_acct_code      ELSE cd.payer_acct_code    END subject_acct_code FROM
//     BAOFOO_CM.cm_entry ce    LEFT JOIN BAOFOO_CM_V2.cm_deal cd      ON cd.deal_id = ce.deal_id    LEFT JOIN
//     BAOFOO_CM.cm_subject cs      ON cs.acct_code = ce.acct_code    LEFT JOIN BAOFOO_CM.cm_deal_code ccc      ON
//     ccc.deal_code = ce.deal_code  WHERE 1=1   AND ce.create_time > '2018-03-01 00:00:00'  AND ce.create_time <
//     '2018-03-15 23:59:59'  AND ce.acct_code IN (1280100010001,2280300010001,1280100020001)   AND (0 = 2 OR (2 =
//     cd.payee_acct_code and ce.cr_dr = 1) OR (2 = cd.payer_acct_code and ce.cr_dr = 2))   AND cd.order_id=1 AND
//     ce.acct_code=1280100020001 AND ce.deal_code=364 ORDER BY ce.create_time DESC) pageReport";
//     // char input[] = "select * from xxxx where '\\a\\b\\c优替艾弗吧\\字\\符\\串' and '中文字符' = 'abcd'";
//     // char input[] = "echo `eeieeeee #qq$(aaaa)qqq` abcd_-www";
//     char input[] = "echo '中文字符串中文字符串中文字符串' 'xx' 'a' 'b' | cmd 'this is input data xxxx' | command -a
//     -b -c -d -other"; int32_t len = strlen(input); flex_token_result res = flex_lexing((char*)input, len, "bash");
// 	int32_t * tokens_pos = res.result;
//     int32_t length = res.result_len;
//     printf("@@ ");
//     for (int32_t i = 0; i < length; i+=2)
//     {
//         // for(int32_t j = 0; j < *(tokens_pos + i + 1) - *(tokens_pos + i) ;j++){
//         //     printf("%c", input[*(tokens_pos + i) + j]);
//         // }
//         // printf("\n@@ ");
//         printf("%llu ", *(tokens_pos + i));
//         printf("%llu ", *(tokens_pos + i + 1));
//     }

// //     test_s("echo ${wqew} $qqq \"qqww$abcd--++\"");
// //     test_s("echo ${IFS}$9 !123");
// //     test_s("echo $(${$(qwe asd)})");
// //     test_s("a=\"${a:-${b\"c${dxxx./222}\"}cccs}\"");
// //     test_s("search=\"${XDG_DATA_HOME:-$HOME/.local/share}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}\"");
// //     test_s("echo ${qwe:-a{s}d}");
// //     test_s("LIBPATH=\"$sd_prog${LIBPATH:+:$LIBPATH}\"");
// //     test_s("cat <<-EOF && ls -al\nqwe$$ bc\nEOF");
// //     test_s("str=$(echo WAYZEK>/tmp/WAYZEK.txt)\nstr=$(cat /tmp/WAYZEK.txt)\nstr1=$(expr length \"$str\")\nif [ 3
// -ne ${str1} ]\nthen sleep 0\nelse sleep 1\nfi ");
// //     test_s("echo 123|echo UVBOWA$((73+86))$(echo UVBOWA)UVBOWA");
// //     test_s(";str=$(echo HTPRQT);str1=$(expr length \"$str\");if [ 3 != $str1 ];then sleep 0;else sleep 1;fi");
// //     test_s("echo\"1\"&sleep 0&&str=$(echo WAYZEK>/tmp/WAYZEK.txt)&&str=$(cat /tmp/WAYZEK.txt)&&str1=$(expr length
// \"$str\")&&[ 3 -eq ${str1} ] &&sleep 1#");
// //     test_s("ping 1.2.3.4");
// //     test_s("/bin/ping -c 4 1.1.1.1");
// //     test_s("echo \"Hello, xxx !\"");
// //     test_s("echo 'bbb' | grep 'xxx'");
// //     test_s("echo It is always good to remember where you came from... \\(Referer: 'referer'\\)");
// //     test_s("echo str | md5sum");
// //     test_s("/bin/ping -c 4 1.2.3.4 > /dev/null &");
// //     test_s("echo str | !@\\#%^&*() || \'\" a>b \?\?/333.444,123 <s ;&& echo \"!@#\\$%^&*()_+-=[ ]{};':/?.>,<\"");
// //     test_s("echo \"could not create directory '$dir': $a\";");
// //     test_s("map { \"--trace='$_:\\$f::\\$n::\\${::}%'\" }");
// //     test_s("command=\"`grep -E \"^Exec([[^]=]*])?=\" \"$file\" | cut -d= -f 2- | first_word`\"");
// //     test_s("WRAPPER=\"`readlink -f \"$0\"`\"");
// //     test_s("echo `echo  \"qwer\"`");
// //     test_s("echo $(qwe `aaa bbb ` )");
// //     test_s("echo `a` $(qwe ` 'a'aa \"bbb\" ` ) cdef");
// //     test_s("echo \"aaa bbb `echo \" qwe \"`ccc ddd\"");
// //     test_s("echo `echo  \"`qwe`\" avc aws `");
// //     test_s("echo \"aaa bbb `echo \" qwe `ccc ddd\"");
// //     test_s("echo \"10928770209831 `echo \"aaaa\" ` ");
// //     test_s("echo 'aaa bbb `echo ' qwe '`ccc ddd'");
// //     test_s("echo $(eqwe ') `echo\"123\"`");
// //     test_s("ping 1.2.3.4#123");
// //     test_s("echo \"333 `qwe -qwe` #qweas\"");
// //     test_s("echo 123 #qweasd \n \"qweasd \naaa\"");
// //     test_s("echo `eeieeeee #qq$(aaaa)qqq` abcd_-www");
// //     test_s("echo  $#123 `echo $#12x3` $(echo $#as123)");
// //     test_s("echo `echo 123%26h$$i $((www)) $(qwe asd)  eee^%26<>?`333");
// //     test_s("echo $$ $0aaxx $b019_9012830 aa\"w $$aaa ${abc} $09876543\"");
// //     test_s("echo `cat \" || && $((1234567))\" | `");
// //     test_s("echo \\$((1234)) \\#qwer `echo 3\\#3333$(cat 666\\$[qwerty])`");
// //     test_s("echo \"qwe\\\"www\"  123\\");
// //     test_s("echo 中！！2!文1123字符wqelj@@ ");
// //     test_s("echo `echo 中文字符2222` c锕軠辏圜233");
// //     test_s("echo \"echo 中文字符2222 c锕軠辏圜233\"");
// //     test_s("echo '中文字符2222` c锕軠辏圜233'");

//     return 0;
// }
